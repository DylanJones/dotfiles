" some reasonable defaults, like syntax highlighting
source /usr/share/vim/vim??/defaults.vim 

" enable plugins
execute pathogen#infect()



" some weird code from the vim wiki to enable gpg editing
" Don't save backups of *.gpg files
set backupskip+=*.gpg
" To avoid that parts of the file is saved to .viminfo when yanking or
" deleting, empty the 'viminfo' option.
set viminfo=

augroup encrypted
  au!
  " Disable swap files, and set binary file format before reading the file
  autocmd BufReadPre,FileReadPre *.gpg
    \ setlocal noswapfile bin
  " Decrypt the contents after reading the file, reset binary file format
  " and run any BufReadPost autocmds matching the file name without the .gpg
  " extension
  autocmd BufReadPost,FileReadPost *.gpg
    \ execute "'[,']!gpg --decrypt --default-recipient-self" |
    \ setlocal nobin |
    \ execute "doautocmd BufReadPost " . expand("%:r")
  " Set binary file format and encrypt the contents before writing the file
  autocmd BufWritePre,FileWritePre *.gpg
    \ setlocal bin |
    \ '[,']!gpg --encrypt --default-recipient-self
  " After writing the file, do an :undo to revert the encryption in the
  " buffer, and reset binary file format
  autocmd BufWritePost,FileWritePost *.gpg
    \ silent u |
    \ setlocal nobin
augroup END



" enable powerline if we have support
if has("python3")
    let g:powerline_pycmd="python3"
    set laststatus=2
    set rtp+=~/.local/lib/python3.7/site-packages/powerline/bindings/vim

    python3 from powerline.vim import setup as powerline_setup
    python3 powerline_setup()
    python3 del powerline_setup
endif

" some settings
set hlsearch
set tabstop=4
set shiftwidth=4
set expandtab
set foldmethod=syntax

" default unfolded
au BufWinEnter * normal zR
" set nofoldenable

" enable ycm
" let g:ycm_server_python_interpreter = '/usr/bin/python2'
" let g:ycm_global_ycm_extra_conf = '/usr/share/vim/vimfiles/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
" let g:ycm_autoclose_preview_window_after_completion = 1
" let g:ycm_confirm_extra_conf = 1
" let g:ycm_extra_conf_globlist = ['~/Arduino/bare_arduino/*']
" " let g:ycm_goto_buffer_command = 'split-or-existing-window'
" " let g:ycm_goto_buffer_command = 'split'

let g:AutoPairs = {'(':')', '[':']', '{':'}'}

" helpful keybindings
nnoremap <silent> <C-l> :noh<CR>
"noremap gy <C-w>s:YcmCompleter GoTo<CR>

" not so helpful keybindings
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>
